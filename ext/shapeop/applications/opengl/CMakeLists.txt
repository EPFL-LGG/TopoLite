# Tell CMake he'll be able to include ".cmake" configurations
# files in the folder where the current file is located
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

# Find GLFW
find_package(GLFW REQUIRED)
include_directories(${GLFW_INCLUDE_DIRS})
add_definitions(${GLFW_DEFINITIONS})
if(NOT GLFW_FOUND)
    message(ERROR " GLFW not found.")
else()
    message("GLFW found.")
endif()
# Find GLEW
find_package(GLEW REQUIRED)
include_directories(${GLEW_INCLUDE_DIRS})
link_directories(${GLEW_LIBRARY_DIRS})
if(NOT GLEW_FOUND)
    message(ERROR " GLEW not found.")
else()
    message("GLEW found.")
endif()
# Find OPENGL
find_package(OpenGL REQUIRED)
include_directories(${OpenGL_INCLUDE_DIRS})
link_directories(${OpenGL_LIBRARY_DIRS})
add_definitions(${OpenGL_DEFINITIONS})
if(NOT OPENGL_FOUND)
    message(ERROR " OPENGL not found.")
else()
    message("OPENGL found.")
endif()

# Find Eigen3
find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})
if(NOT EIGEN3_FOUND)
    message(ERROR " EIGEN not found.")
else()
    message("EIGEN found.")
endif()

# Find OPENGP
find_package(OpenGP REQUIRED)
include_directories(${OpenGP_INCLUDE_DIRS})
add_definitions(-DHEADERONLY)
add_definitions(-DUSE_EIGEN)
if(NOT OPENGP_FOUND)
    message(ERROR " OPENGP not found.")
else()
  message("OPENGP found.")
endif()

include_directories("${PROJECT_SOURCE_DIR}/libShapeOp/src")
link_directories("${PROJECT_BINARY_DIR}/libShapeOp")
add_executable(openGLViewer src/main.cpp src/window.h src/gldebug.h src/camera.h src/mesh.h src/shader.h src/renderer.h src/helper.h)
target_link_libraries(openGLViewer ShapeOp)
target_link_libraries(openGLViewer ${GLFW_LIBRARIES})
target_link_libraries(openGLViewer ${GLEW_LIBRARIES})
target_link_libraries(openGLViewer ${OPENGL_LIBRARIES})

configure_file(vshaderMRT.glsl vshaderMRT.glsl COPYONLY)
configure_file(fshaderMRT.glsl fshaderMRT.glsl COPYONLY)
configure_file(vshaderShadow.glsl vshaderShadow.glsl COPYONLY)
configure_file(fshaderShadow.glsl fshaderShadow.glsl COPYONLY)
configure_file(vshaderGI.glsl vshaderGI.glsl COPYONLY)
configure_file(fshaderGI.glsl fshaderGI.glsl COPYONLY)
configure_file(vshaderDirect.glsl vshaderDirect.glsl COPYONLY)
configure_file(fshaderDirect.glsl fshaderDirect.glsl COPYONLY)
configure_file(vshaderFXAA.glsl vshaderFXAA.glsl COPYONLY)
configure_file(fshaderFXAA.glsl fshaderFXAA.glsl COPYONLY)

configure_file(neutral.obj neutral.obj COPYONLY)
configure_file(random.tga random.tga COPYONLY)
